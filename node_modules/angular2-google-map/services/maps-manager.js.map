{"version":3,"sources":["maps-manager.js","services/maps-manager.js","services/maps-manager.ts"],"names":["__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","core_1","require","loader_1","MapsManager","loader","_maps","Map","prototype","createMarker","options","load","then","google","maps","Marker","createMap","el","getMap","name","_this","get","addMap","map","set","removeMap","Injectable","LoaderGoogleMapsApi","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACPA,YACA,IAAIA,YAAcC,MAAQA,KAAKD,YAAe,SAAUE,WAAYC,OAAQC,IAAKC,MAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAQ,EAAJH,EAAQJ,OAAkB,OAATE,KAAgBA,KAAOM,OAAOC,yBAAyBT,OAAQC,KAAOC,IACrH,IAAuB,gBAAZQ,UAAoD,kBAArBA,SAAQC,SAAyBJ,EAAIG,QAAQC,SAASZ,WAAYC,OAAQC,IAAKC,UACpH,KAAK,GAAIU,GAAIb,WAAWO,OAAS,EAAGM,GAAK,EAAGA,KAAST,EAAIJ,WAAWa,MAAIL,GAAS,EAAJH,EAAQD,EAAEI,GAAKH,EAAI,EAAID,EAAEH,OAAQC,IAAKM,GAAKJ,EAAEH,OAAQC,OAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOK,eAAeb,OAAQC,IAAKM,GAAIA,GAE5DO,WAAchB,MAAQA,KAAKgB,YAAe,SAAUC,EAAGC,GACvD,MAAuB,gBAAZN,UAAoD,kBAArBA,SAAQO,SAAgCP,QAAQO,SAASF,EAAGC,GAAtG,QCIJE,OAAAC,QAAyB,iBACzBC,SAAAD,QAAkC,kBAIlCE,YAAA,WAGI,QAAAA,aAAoBC,QAAAxB,KAAAwB,OAAAA,OAFZxB,KAAAyB,MAAsC,GAAIC,KAyBtD,MAnBIH,aAAAI,UAAAC,aAAA,SAAaC,SACT,MAAO7B,MAAKwB,OAAOM,OAAOC,KAAK,WAAM,MAAA,IAAIC,QAAOC,KAAKC,OAAOL,YAGhEN,YAAAI,UAAAQ,UAAA,SAAUC,GAAiBP,SACvB,MAAO7B,MAAKwB,OAAOM,OAAOC,KAAK,WAAM,MAAA,IAAIC,QAAOC,KAAKP,IAAIU,GAAIP,YAGjEN,YAAAI,UAAAU,OAAA,SAAOC,MAAP,GAAAC,OAAAvC,IACI,OAAOA,MAAKwB,OAAOM,OAAOC,KAAK,WAAM,MAAAQ,OAAKd,MAAMe,IAAIF,SAGxDf,YAAAI,UAAAc,OAAA,SAAOH,KAAcI,KACjB1C,KAAKyB,MAAMkB,IAAIL,KAAMI,MAGzBnB,YAAAI,UAAAiB,UAAA,SAAUN,MACN,MAAOtC,MAAKyB,MAALzB,UAAkBsC,OAzBjCf,YAAAxB,YAACqB,OAAAyB,aDmBO7B,WAAW,qBAAsBM,SAASwB,uBAC3CvB,eCnBMwB,SAAAxB,YAAWA","file":"services/maps-manager.js","sourcesContent":[null,"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require('angular2/core');\nvar loader_1 = require('../core/loader');\nvar MapsManager = (function () {\n    function MapsManager(loader) {\n        this.loader = loader;\n        this._maps = new Map();\n    }\n    MapsManager.prototype.createMarker = function (options) {\n        return this.loader.load().then(function () { return new google.maps.Marker(options); });\n    };\n    MapsManager.prototype.createMap = function (el, options) {\n        return this.loader.load().then(function () { return new google.maps.Map(el, options); });\n    };\n    MapsManager.prototype.getMap = function (name) {\n        var _this = this;\n        return this.loader.load().then(function () { return _this._maps.get(name); });\n    };\n    MapsManager.prototype.addMap = function (name, map) {\n        this._maps.set(name, map);\n    };\n    MapsManager.prototype.removeMap = function (name) {\n        return this._maps.delete(name);\n    };\n    MapsManager = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [loader_1.LoaderGoogleMapsApi])\n    ], MapsManager);\n    return MapsManager;\n}());\nexports.MapsManager = MapsManager;\n","/**\n * Project: angular2-google-maps\n * File:  2016-03-19 21:58\n * ----------------------------------------------\n *\n * @author      Stanislav Kiryukhin <korsar.zn@gmail.com>\n * @copyright   Copyright (c) 2016, Core12 Team\n *\n * ----------------------------------------------\n * All Rights Reserved.\n * ----------------------------------------------\n */\nimport {Injectable} from 'angular2/core';\nimport {LoaderGoogleMapsApi} from '../core/loader';\nimport {GoogleMapComponent} from '../components/google-map';\n\n@Injectable()\nexport class MapsManager {\n    private _maps: Map<string, google.maps.Map> = new Map<string, google.maps.Map>();\n\n    constructor(private loader: LoaderGoogleMapsApi) {\n\n    }\n\n    createMarker(options?: google.maps.MarkerOptions): Promise<google.maps.Marker> {\n        return this.loader.load().then(() => new google.maps.Marker(options));\n    }\n\n    createMap(el: HTMLElement, options?: google.maps.MapOptions): Promise<google.maps.Map> {\n        return this.loader.load().then(() => new google.maps.Map(el, options));\n    }\n\n    getMap(name: string): Promise<google.maps.Map> {\n        return this.loader.load().then(() => this._maps.get(name));\n    }\n\n    addMap(name: string, map: google.maps.Map): void {\n        this._maps.set(name, map);\n    }\n\n    removeMap(name: string): boolean {\n        return this._maps.delete(name);\n    }\n}\n"],"sourceRoot":"/source/"}