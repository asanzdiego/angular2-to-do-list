{"version":3,"sources":["lazy.js","core/loaders/lazy.js","core/loaders/lazy.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","core_1","require","loader_1","ScriptLoaderProtocol","exports","LAZY_LOADER_OPTIONS","OpaqueToken","LOADER_OPTIONS_DEFAULT","apiVersion","protocol","HTTPS","hostAndPath","libraries","LazyLoaderGoogleMapsApi","_super","options","call","_options","assign","load","_promise","createPromise","_this","Promise","resolve","reject","callbackName","Date","getTime","window","document","body","appendChild","createScript","onError","script","createElement","type","src","createScriptUrl","async","defer","onerror","getProtocol","getQueryParams","AUTO","HTTP","queryParams","callback","apiKey","join","region","language","params","push","Injectable","Inject","LoaderGoogleMapsApi"],"mappings":"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","file":"core/loaders/lazy.js","sourcesContent":[null,"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar core_1 = require('angular2/core');\nvar loader_1 = require('../loader');\n(function (ScriptLoaderProtocol) {\n    ScriptLoaderProtocol[ScriptLoaderProtocol[\"AUTO\"] = 0] = \"AUTO\";\n    ScriptLoaderProtocol[ScriptLoaderProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    ScriptLoaderProtocol[ScriptLoaderProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n})(exports.ScriptLoaderProtocol || (exports.ScriptLoaderProtocol = {}));\nvar ScriptLoaderProtocol = exports.ScriptLoaderProtocol;\nexports.LAZY_LOADER_OPTIONS = new core_1.OpaqueToken('_sk.LazyLoaderGoogleMapsApiOptions');\nexports.LOADER_OPTIONS_DEFAULT = {\n    apiVersion: 3,\n    protocol: ScriptLoaderProtocol.HTTPS,\n    hostAndPath: 'maps.googleapis.com/maps/api/js',\n    libraries: []\n};\nvar LazyLoaderGoogleMapsApi = (function (_super) {\n    __extends(LazyLoaderGoogleMapsApi, _super);\n    function LazyLoaderGoogleMapsApi(options) {\n        _super.call(this);\n        this._options = Object.assign({}, exports.LOADER_OPTIONS_DEFAULT, options);\n    }\n    LazyLoaderGoogleMapsApi.prototype.load = function () {\n        if (this._promise) {\n            return this._promise;\n        }\n        return this._promise = this.createPromise();\n    };\n    LazyLoaderGoogleMapsApi.prototype.createPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var callbackName = \"_gmi\" + new Date().getTime();\n            window[callbackName] = resolve;\n            document.body.appendChild(_this.createScript(callbackName, reject));\n        });\n    };\n    LazyLoaderGoogleMapsApi.prototype.createScript = function (callbackName, onError) {\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = this.createScriptUrl(callbackName);\n        script.async = true;\n        script.defer = true;\n        script.onerror = onError;\n        return script;\n    };\n    LazyLoaderGoogleMapsApi.prototype.createScriptUrl = function (callbackName) {\n        return this.getProtocol() + \"//\" + this._options.hostAndPath + this.getQueryParams(callbackName);\n    };\n    LazyLoaderGoogleMapsApi.prototype.getProtocol = function () {\n        switch (this._options.protocol) {\n            case ScriptLoaderProtocol.AUTO:\n                return '';\n            case ScriptLoaderProtocol.HTTP:\n                return 'http:';\n            case ScriptLoaderProtocol.HTTPS:\n            default:\n                return 'https:';\n        }\n    };\n    LazyLoaderGoogleMapsApi.prototype.getQueryParams = function (callbackName) {\n        var queryParams = {\n            v: this._options.apiVersion,\n            callback: callbackName\n        };\n        if (this._options.apiKey) {\n            queryParams['key'] = this._options.apiKey;\n        }\n        if (this._options.libraries.length) {\n            queryParams['libraries'] = this._options.libraries.join(',');\n        }\n        if (this._options.region) {\n            queryParams['region'] = this._options.region;\n        }\n        if (this._options.language) {\n            queryParams['language'] = this._options.language;\n        }\n        var params = [];\n        for (var key in queryParams) {\n            params.push(key + \"=\" + queryParams[key]);\n        }\n        return \"?\" + params.join('&');\n    };\n    LazyLoaderGoogleMapsApi = __decorate([\n        core_1.Injectable(),\n        __param(0, core_1.Inject(exports.LAZY_LOADER_OPTIONS)), \n        __metadata('design:paramtypes', [Object])\n    ], LazyLoaderGoogleMapsApi);\n    return LazyLoaderGoogleMapsApi;\n}(loader_1.LoaderGoogleMapsApi));\nexports.LazyLoaderGoogleMapsApi = LazyLoaderGoogleMapsApi;\n","/**\n * Project: angular2-google-maps\n * File:  2016-03-20 03:09\n * ----------------------------------------------\n *\n * @author      Stanislav Kiryukhin <korsar.zn@gmail.com>\n * @copyright   Copyright (c) 2016, Core12 Team\n *\n * ----------------------------------------------\n * All Rights Reserved.\n * ----------------------------------------------\n */\nimport {Injectable, Inject, OpaqueToken} from 'angular2/core';\nimport {LoaderGoogleMapsApi} from '../loader';\n\nexport enum ScriptLoaderProtocol {AUTO, HTTP, HTTPS}\n\nexport interface LoaderOptions {\n    /**\n     * The Google Maps API Key (see:\n     * https://developers.google.com/maps/documentation/javascript/get-api-key)\n     */\n    apiKey?: string;\n\n    /**\n     * Google Maps API version.\n     */\n    apiVersion?: string | number;\n\n    /**\n     * Protocol used for the `<script>` tag.\n     */\n    protocol?: ScriptLoaderProtocol;\n\n    /**\n     * Host and Path used for the `<script>` tag.\n     */\n    hostAndPath?: string;\n\n    /**\n     * Defines which Google Maps libraries should get loaded.\n     */\n    libraries?: string[];\n\n    /**\n     * The default bias for the map behavior is US.\n     * If you wish to alter your application to serve different map tiles or bias the\n     * application, you can overwrite the default behavior (US) by defining a `region`.\n     * See https://developers.google.com/maps/documentation/javascript/basics#Region\n     */\n    region?: string;\n\n    /**\n     * The Google Maps API uses the browser's preferred language when displaying\n     * textual information. If you wish to overwrite this behavior and force the API\n     * to use a given language, you can use this setting.\n     * See https://developers.google.com/maps/documentation/javascript/basics#Language\n     */\n    language?: string;\n}\n\nexport const LAZY_LOADER_OPTIONS = new OpaqueToken('_sk.LazyLoaderGoogleMapsApiOptions');\nexport const LOADER_OPTIONS_DEFAULT: LoaderOptions = {\n    apiVersion: 3,\n    protocol: ScriptLoaderProtocol.HTTPS,\n    hostAndPath: 'maps.googleapis.com/maps/api/js',\n    libraries: []\n};\n\n@Injectable()\nexport class LazyLoaderGoogleMapsApi extends LoaderGoogleMapsApi {\n    private _options: LoaderOptions;\n    private _promise: Promise<void>;\n\n    constructor(@Inject(LAZY_LOADER_OPTIONS) options: LoaderOptions) {\n        super();\n        this._options = Object.assign({}, LOADER_OPTIONS_DEFAULT, options);\n    }\n\n    load(): Promise<void> {\n        if (this._promise) {\n            return this._promise;\n        }\n\n        return this._promise = this.createPromise();\n    }\n\n    private createPromise(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const callbackName: string = `_gmi${new Date().getTime()}`;\n\n            (<any>window)[callbackName] = resolve;\n            document.body.appendChild(this.createScript(callbackName, reject));\n        });\n    }\n\n    private createScript(callbackName: string, onError: (error: Event) => void): HTMLScriptElement {\n        let script = document.createElement('script');\n\n        script.type    = 'text/javascript';\n        script.src     = this.createScriptUrl(callbackName);\n        script.async   = true;\n        script.defer   = true;\n        script.onerror = onError;\n\n        return script;\n    }\n\n    private createScriptUrl(callbackName: string): string {\n        return `${this.getProtocol()}//${this._options.hostAndPath}${this.getQueryParams(callbackName)}`;\n    }\n\n    private getProtocol(): string {\n        switch (this._options.protocol) {\n            case ScriptLoaderProtocol.AUTO:\n                return '';\n\n            case ScriptLoaderProtocol.HTTP:\n                return 'http:';\n\n            case ScriptLoaderProtocol.HTTPS:\n            default:\n                return 'https:';\n        }\n    }\n\n    private getQueryParams(callbackName: string): string {\n        const queryParams: {[k: string]: any} = {\n            v: this._options.apiVersion,\n            callback: callbackName\n        };\n\n        if (this._options.apiKey) {\n            queryParams['key'] = this._options.apiKey;\n        }\n\n        if (this._options.libraries.length) {\n            queryParams['libraries'] = this._options.libraries.join(',');\n        }\n\n        if (this._options.region) {\n            queryParams['region'] = this._options.region;\n        }\n\n        if (this._options.language) {\n            queryParams['language'] = this._options.language;\n        }\n\n        const params: string[] = [];\n\n        for (let key in queryParams) {\n            params.push(`${key}=${queryParams[key]}`);\n        }\n\n        return `?${params.join('&')}`;\n    }\n}\n"],"sourceRoot":"/source/"}