/**
 * angular2-google-map - Angular2 components for Google Maps
 * @author Stanislav Kiryukhin <korsar.zn@gmail.com>
 * @version v0.1.7
 * @link 
 * @license MIT
 */
"use strict";var __extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},__decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(3>c?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__metadata=this&&this.__metadata||function(k,v){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(k,v):void 0},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}},core_1=require("angular2/core"),loader_1=require("../loader");!function(ScriptLoaderProtocol){ScriptLoaderProtocol[ScriptLoaderProtocol.AUTO=0]="AUTO",ScriptLoaderProtocol[ScriptLoaderProtocol.HTTP=1]="HTTP",ScriptLoaderProtocol[ScriptLoaderProtocol.HTTPS=2]="HTTPS"}(exports.ScriptLoaderProtocol||(exports.ScriptLoaderProtocol={}));var ScriptLoaderProtocol=exports.ScriptLoaderProtocol;exports.LAZY_LOADER_OPTIONS=new core_1.OpaqueToken("_sk.LazyLoaderGoogleMapsApiOptions"),exports.LOADER_OPTIONS_DEFAULT={apiVersion:3,protocol:ScriptLoaderProtocol.HTTPS,hostAndPath:"maps.googleapis.com/maps/api/js",libraries:[]};var LazyLoaderGoogleMapsApi=function(_super){function LazyLoaderGoogleMapsApi(options){_super.call(this),this._options=Object.assign({},exports.LOADER_OPTIONS_DEFAULT,options)}return __extends(LazyLoaderGoogleMapsApi,_super),LazyLoaderGoogleMapsApi.prototype.load=function(){return this._promise?this._promise:this._promise=this.createPromise()},LazyLoaderGoogleMapsApi.prototype.createPromise=function(){var _this=this;return new Promise(function(resolve,reject){var callbackName="_gmi"+(new Date).getTime();window[callbackName]=resolve,document.body.appendChild(_this.createScript(callbackName,reject))})},LazyLoaderGoogleMapsApi.prototype.createScript=function(callbackName,onError){var script=document.createElement("script");return script.type="text/javascript",script.src=this.createScriptUrl(callbackName),script.async=!0,script.defer=!0,script.onerror=onError,script},LazyLoaderGoogleMapsApi.prototype.createScriptUrl=function(callbackName){return this.getProtocol()+"//"+this._options.hostAndPath+this.getQueryParams(callbackName)},LazyLoaderGoogleMapsApi.prototype.getProtocol=function(){switch(this._options.protocol){case ScriptLoaderProtocol.AUTO:return"";case ScriptLoaderProtocol.HTTP:return"http:";case ScriptLoaderProtocol.HTTPS:default:return"https:"}},LazyLoaderGoogleMapsApi.prototype.getQueryParams=function(callbackName){var queryParams={v:this._options.apiVersion,callback:callbackName};this._options.apiKey&&(queryParams.key=this._options.apiKey),this._options.libraries.length&&(queryParams.libraries=this._options.libraries.join(",")),this._options.region&&(queryParams.region=this._options.region),this._options.language&&(queryParams.language=this._options.language);var params=[];for(var key in queryParams)params.push(key+"="+queryParams[key]);return"?"+params.join("&")},LazyLoaderGoogleMapsApi=__decorate([core_1.Injectable(),__param(0,core_1.Inject(exports.LAZY_LOADER_OPTIONS)),__metadata("design:paramtypes",[Object])],LazyLoaderGoogleMapsApi)}(loader_1.LoaderGoogleMapsApi);exports.LazyLoaderGoogleMapsApi=LazyLoaderGoogleMapsApi;
//# sourceMappingURL=lazy.js.map
